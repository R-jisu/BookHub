let bookRepository;_010‍.x([["getBooks",()=>getBooks],["getById",()=>getById],["createBook",()=>createBook],["updateBook",()=>updateBook],["deleteBook",()=>deleteBook]]);_010‍.w("../data/books.js",[["*",null,function(v){bookRepository=v}]]);

const request = require("request");
const convert = require('xml-js');

const client_id = "E_7i0KfAYDXbZGXED7wh";
const client_secret = "I73xFgMJIc";

       async function getBooks(req, res) {
  const bookname = req.query.bookname;
  const option = {
    d_titl: bookname
  };
  const options = {
    uri: "https://openapi.naver.com/v1/search/book_adv.xml", 
    qs: option,
    headers: {
      'X-Naver-Client-Id': client_id,
      'X-Naver-Client-Secret': client_secret
    }
  }

  request.get(options, (error, response, body) => {
    if (!error && response.statusCode == 200) {
      _010‍.g.console.log(body)
      // let json = JSON.parse(body) 
      // console.log(json)
      var xmlToJson = convert.xml2json(result, {compact: true, spaces: 4});
      console.log(`xml to json => ${xmlToJson}`)
      res.status(200).json(xmlToJson);
    } else {
      res.status(response.statusCode).end(); //출력하는 부분
      _010‍.g.console.log('error = ' + JSON.stringify(response));
    }
  })

  // const data = await (bookname
  //   ? bookRepository.getAllByBookname(bookname)
  //   : bookRepository.getAll());

}

       async function getById(req, res) {
  const id = req.params.id;
  const book = await bookRepository.getById(id);

  if (book) {
    res.status(200).json(book);
  } else {
    res.status(404).json({ message: `Book ${id} not found` });
  }
}

       async function createBook(req, res) {
  const { text, name, bookname } = req.body;
  const book = await bookRepository.create(text, name, bookname);

  res.status(201).json(book);
}

       async function updateBook(req, res) {
  const id = req.params.id;
  const text = req.body.text;
  const book = await bookRepository.update(id, text);
  if (book) {
    res.status(200).json(book);
  } else {
    res.status(404).json({ message: `Book ${id} not found` });
  }
}

       async function deleteBook(req, res) {
  const id = req.params.id;
  await bookRepository.remove(id);

  res.sendStatus(204);
}
