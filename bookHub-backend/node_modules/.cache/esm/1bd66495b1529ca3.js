let jwt,userRepository;_b15‍.x([["isAuth",()=>isAuth]]);_b15‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_b15‍.w("../data/auth.js",[["*",null,function(v){userRepository=v}]]);


const AUTH_ERROR = { message: "Authentication Error" };

       const isAuth = async (req, res, next) => {
  const authHeader = req.get("Authorization");
  if (!(authHeader && authHeader.startsWith("Bearer "))) {
    return res.status(401).json(AUTH_ERROR);
  }

  const token = authHeader.split(" ")[1];

  jwt.verify(
    token,
    "nq&zX@bjLuboU*$zkX3CfV#RBd!mkWv^",
    async (error, decoded) => {
      if (error) {
        return res.status(401).json(AUTH_ERROR);
      }
      const user = await userRepository.findById(decoded.id);
      if (!user) {
        return res.status(401).json(AUTH_ERROR);
      }

      req.userId = user.id; //req.customData
      next();
    }
  );
};
