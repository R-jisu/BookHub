let express,body,validate,authContller,isAuth;_a35‍.x([["default",()=>_a35‍.o]]);_a35‍.w("express",[["default",["express"],function(v){express=v}]]);_a35‍.w("express-async-errors");_a35‍.w("express-validator",[["body",["body"],function(v){body=v}]]);_a35‍.w("../middleware/validator.js",[["validate",["validate"],function(v){validate=v}]]);_a35‍.w("../controller/auth.js",[["*",null,function(v){authContller=v}]]);_a35‍.w("../middleware/auth.js",[["isAuth",["isAuth"],function(v){isAuth=v}]]);






const router = express.Router();

const validateCredential = [
  body("username")
    .notEmpty()
    .withMessage("username should be at least 5 characters"),
  body("password")
    .trim()
    .isLength({ min: 5 })
    .withMessage("password should be at least 5 characters"),
  validate,
];

const validateSignup = [
  ...validateCredential,
  body("name").notEmpty().withMessage("name is missing"),
  body("email").isEmail().normalizeEmail().withMessage("invalid email"),
  body("url")
    .isURL()
    .withMessage("invalid URL")
    .optional({ nullable: true, checkFalsy: true }),
  validate,
];

router.post("/signup", validateSignup, authContller.signup);
router.post("/login", validateCredential, authContller.login);
router.get("/me", isAuth, authContller.me);

_a35‍.d(router);
